import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Checkbox } from './ui/checkbox';
import { Input } from './ui/input';
import { AlertTriangle, Search, Thermometer, Heart, Brain, Stethoscope } from 'lucide-react';

type Language = 'en' | 'hi' | 'te' | 'bn';

interface SymptomsCheckerProps {
  language: Language;
}

const translations = {
  en: {
    title: 'Symptoms Checker',
    subtitle: 'Check your symptoms and get preliminary guidance',
    searchPlaceholder: 'Search symptoms...',
    selectSymptoms: 'Select your symptoms:',
    checkSymptoms: 'Check Symptoms',
    disclaimer: 'Disclaimer',
    disclaimerText: 'This tool provides general information only and is not a substitute for professional medical advice. Consult a healthcare provider for proper diagnosis and treatment.',
    emergencyWarning: 'üö® Seek immediate medical attention if you experience severe symptoms',
    categories: {
      general: 'General',
      respiratory: 'Respiratory',
      digestive: 'Digestive',
      neurological: 'Neurological'
    },
    severity: {
      mild: 'Mild',
      moderate: 'Moderate',
      severe: 'Severe'
    },
    recommendations: {
      mild: 'Monitor symptoms and rest. Drink plenty of fluids.',
      moderate: 'Consider consulting a healthcare provider if symptoms persist.',
      severe: 'Seek immediate medical attention.'
    }
  },
  hi: {
    title: '‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§Ç‡§ö‡§ï‡§∞‡•ç‡§§‡§æ',
    subtitle: '‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç',
    searchPlaceholder: '‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ñ‡•ã‡§ú‡•á‡§Ç...',
    selectSymptoms: '‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ö‡•Å‡§®‡•á‡§Ç:',
    checkSymptoms: '‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç',
    disclaimer: '‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£',
    disclaimerText: '‡§Ø‡§π ‡§â‡§™‡§ï‡§∞‡§£ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§â‡§ö‡§ø‡§§ ‡§®‡§ø‡§¶‡§æ‡§® ‡§î‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§',
    emergencyWarning: 'üö® ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç',
    categories: {
      general: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø',
      respiratory: '‡§∂‡•ç‡§µ‡§∏‡§®',
      digestive: '‡§™‡§æ‡§ö‡§®',
      neurological: '‡§®‡•ç‡§Ø‡•Ç‡§∞‡•ã‡§≤‡•â‡§ú‡§ø‡§ï‡§≤'
    },
    severity: {
      mild: '‡§π‡§≤‡•ç‡§ï‡§æ',
      moderate: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ',
      severe: '‡§ó‡§Ç‡§≠‡•Ä‡§∞'
    },
    recommendations: {
      mild: '‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§§‡§∞‡§≤ ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§™‡§ø‡§è‡§Ç‡•§',
      moderate: '‡§Ø‡§¶‡§ø ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¨‡§®‡•á ‡§∞‡§π‡•á‡§Ç ‡§§‡•ã ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§',
      severe: '‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç‡•§'
    }
  },
  te: {
    title: '‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤ ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä',
    subtitle: '‡∞Æ‡±Ä ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞•‡∞Æ‡∞ø‡∞ï ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞ï‡∞§‡±ç‡∞µ‡∞Ç ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø',
    searchPlaceholder: '‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞µ‡±Ü‡∞§‡∞ï‡∞Ç‡∞°‡∞ø...',
    selectSymptoms: '‡∞Æ‡±Ä ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:',
    checkSymptoms: '‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
    disclaimer: '‡∞®‡∞ø‡∞∞‡∞æ‡∞ï‡∞∞‡∞£',
    disclaimerText: '‡∞à ‡∞∏‡∞æ‡∞ß‡∞®‡∞Ç ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡±É‡∞§‡±ç‡∞§‡∞ø‡∞™‡∞∞‡∞Æ‡±à‡∞® ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞≤‡∞π‡∞æ‡∞ï‡±Å ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø‡∞Ç ‡∞ï‡∞æ‡∞¶‡±Å‡•§ ‡∞∏‡∞∞‡±à‡∞® ‡∞∞‡±ã‡∞ó‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ö‡∞ø‡∞ï‡∞ø‡∞§‡±ç‡∞∏ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡±á‡∞µ‡∞æ ‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞§‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø‡•§',
    emergencyWarning: 'üö® ‡∞§‡±Ä‡∞µ‡±ç‡∞∞‡∞Æ‡±à‡∞® ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞ø‡∞∏‡±ç‡∞§‡±á ‡∞µ‡±Ü‡∞Ç‡∞ü‡∞®‡±á ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',
    categories: {
      general: '‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£',
      respiratory: '‡∞∂‡±ç‡∞µ‡∞æ‡∞∏',
      digestive: '‡∞ú‡±Ä‡∞∞‡±ç‡∞£',
      neurological: '‡∞®‡±ç‡∞Ø‡±Ç‡∞∞‡±ã‡∞≤‡∞æ‡∞ú‡∞ø‡∞ï‡∞≤‡±ç'
    },
    severity: {
      mild: '‡∞§‡±á‡∞≤‡∞ø‡∞ï',
      moderate: '‡∞Æ‡∞ß‡±ç‡∞Ø‡∞∏‡±ç‡∞•',
      severe: '‡∞§‡±Ä‡∞µ‡±ç‡∞∞‡∞Æ‡±à‡∞®'
    },
    recommendations: {
      mild: '‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞™‡∞∞‡±ç‡∞Ø‡∞µ‡±á‡∞ï‡±ç‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡∞ø‡∞∂‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞ø ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø‡•§ ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞¶‡±ç‡∞∞‡∞µ‡∞æ‡∞≤‡±Å ‡∞§‡±ç‡∞∞‡∞æ‡∞ó‡∞Ç‡∞°‡∞ø‡•§',
      moderate: '‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞§‡±á ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡±á‡∞µ‡∞æ ‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞§‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞∞‡∞ø‡∞ó‡∞£‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø‡•§',
      severe: '‡∞µ‡±Ü‡∞Ç‡∞ü‡∞®‡±á ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø‡•§'
    }
  },
  bn: {
    title: '‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶ï‡¶æ‡¶∞‡ßÄ',
    subtitle: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶™‡¶æ‡¶®',
    searchPlaceholder: '‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®...',
    selectSymptoms: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:',
    checkSymptoms: '‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
    disclaimer: '‡¶¶‡¶æ‡¶¨‡¶ø‡¶§‡ßç‡¶Ø‡¶æ‡¶ó',
    disclaimerText: '‡¶è‡¶á ‡¶ü‡ßÅ‡¶≤‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶®‡¶Ø‡¶º‡•§ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶∏‡ßá‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
    emergencyWarning: 'üö® ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶Ö‡¶®‡ßÅ‡¶≠‡¶¨ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶®‡¶ø‡¶®',
    categories: {
      general: '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£',
      respiratory: '‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡¶®‡ßç‡¶§‡ßç‡¶∞',
      digestive: '‡¶™‡¶æ‡¶ö‡¶®‡¶§‡¶®‡ßç‡¶§‡ßç‡¶∞',
      neurological: '‡¶∏‡ßç‡¶®‡¶æ‡¶Ø‡¶º‡¶¨‡¶ø‡¶ï'
    },
    severity: {
      mild: '‡¶Æ‡ßÉ‡¶¶‡ßÅ',
      moderate: '‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø',
      severe: '‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞'
    },
    recommendations: {
      mild: '‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßç‡¶∞‡¶æ‡¶Æ ‡¶®‡¶ø‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶ö‡ßÅ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá ‡¶§‡¶∞‡¶≤ ‡¶™‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
      moderate: '‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ö‡¶¨‡ßç‡¶Ø‡¶æ‡¶π‡¶§ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶∏‡ßá‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶¨‡¶ø‡¶¨‡ßá‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
      severe: '‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶®‡¶ø‡¶®‡•§'
    }
  }
};

const symptomsData = {
  general: [
    { name: 'Fever', severity: 'moderate', category: 'general' },
    { name: 'Fatigue', severity: 'mild', category: 'general' },
    { name: 'Body aches', severity: 'mild', category: 'general' },
    { name: 'Chills', severity: 'moderate', category: 'general' },
    { name: 'Loss of appetite', severity: 'mild', category: 'general' }
  ],
  respiratory: [
    { name: 'Cough', severity: 'mild', category: 'respiratory' },
    { name: 'Shortness of breath', severity: 'severe', category: 'respiratory' },
    { name: 'Chest pain', severity: 'severe', category: 'respiratory' },
    { name: 'Sore throat', severity: 'mild', category: 'respiratory' },
    { name: 'Runny nose', severity: 'mild', category: 'respiratory' }
  ],
  digestive: [
    { name: 'Nausea', severity: 'mild', category: 'digestive' },
    { name: 'Vomiting', severity: 'moderate', category: 'digestive' },
    { name: 'Diarrhea', severity: 'moderate', category: 'digestive' },
    { name: 'Stomach pain', severity: 'moderate', category: 'digestive' },
    { name: 'Loss of taste', severity: 'mild', category: 'digestive' }
  ],
  neurological: [
    { name: 'Headache', severity: 'mild', category: 'neurological' },
    { name: 'Dizziness', severity: 'moderate', category: 'neurological' },
    { name: 'Confusion', severity: 'severe', category: 'neurological' },
    { name: 'Seizures', severity: 'severe', category: 'neurological' },
    { name: 'Memory problems', severity: 'moderate', category: 'neurological' }
  ]
};

const categoryIcons = {
  general: Thermometer,
  respiratory: Stethoscope,
  digestive: Heart,
  neurological: Brain
};

const severityColors = {
  mild: 'bg-green-100 text-green-700',
  moderate: 'bg-yellow-100 text-yellow-700',
  severe: 'bg-red-100 text-red-700'
};

export function SymptomsChecker({ language }: SymptomsCheckerProps) {
  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);

  const t = translations[language] || translations.en;

  const allSymptoms = Object.values(symptomsData).flat();
  
  const filteredSymptoms = allSymptoms.filter(symptom => {
    const matchesSearch = symptom.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = !selectedCategory || symptom.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const handleSymptomToggle = (symptomName: string) => {
    setSelectedSymptoms(prev =>
      prev.includes(symptomName)
        ? prev.filter(s => s !== symptomName)
        : [...prev, symptomName]
    );
  };

  const analyzeSymptoms = () => {
    setShowResults(true);
  };

  const getOverallSeverity = () => {
    if (selectedSymptoms.length === 0) return 'mild';
    
    const selectedSymptomObjects = allSymptoms.filter(s => selectedSymptoms.includes(s.name));
    const severities = selectedSymptomObjects.map(s => s.severity);
    
    if (severities.includes('severe')) return 'severe';
    if (severities.includes('moderate')) return 'moderate';
    return 'mild';
  };

  const getPossibleConditions = () => {
    if (selectedSymptoms.length === 0) return [];
    
    // Simple pattern matching for common conditions
    const symptoms = selectedSymptoms.map(s => s.toLowerCase());
    const conditions = [];
    
    if (symptoms.includes('fever') && symptoms.includes('cough')) {
      conditions.push('Common cold or flu');
    }
    if (symptoms.includes('fever') && symptoms.includes('body aches')) {
      conditions.push('Viral infection');
    }
    if (symptoms.includes('nausea') && symptoms.includes('vomiting')) {
      conditions.push('Gastroenteritis');
    }
    if (symptoms.includes('headache') && symptoms.includes('fever')) {
      conditions.push('Viral illness');
    }
    
    return conditions.length > 0 ? conditions : ['General illness - consult healthcare provider'];
  };

  if (showResults) {
    const severity = getOverallSeverity();
    const conditions = getPossibleConditions();
    
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl">Symptom Analysis Results</h1>
          <Button variant="outline" onClick={() => setShowResults(false)}>
            ‚Üê Back to Checker
          </Button>
        </div>

        <Card className={`border-2 ${severity === 'severe' ? 'border-red-300 bg-red-50' : severity === 'moderate' ? 'border-yellow-300 bg-yellow-50' : 'border-green-300 bg-green-50'}`}>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <AlertTriangle className="w-5 h-5" />
              <span>Assessment Results</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <p className="text-sm text-gray-600 mb-2">Selected symptoms:</p>
                <div className="flex flex-wrap gap-2">
                  {selectedSymptoms.map(symptom => (
                    <Badge key={symptom} variant="secondary">{symptom}</Badge>
                  ))}
                </div>
              </div>

              <div>
                <p className="text-sm text-gray-600 mb-2">Severity level:</p>
                <Badge className={severityColors[severity as keyof typeof severityColors]}>
                  {t.severity[severity as keyof typeof t.severity]}
                </Badge>
              </div>

              <div>
                <p className="text-sm text-gray-600 mb-2">Possible conditions:</p>
                <ul className="list-disc list-inside space-y-1">
                  {conditions.map((condition, index) => (
                    <li key={index} className="text-sm">{condition}</li>
                  ))}
                </ul>
              </div>

              <div className="p-4 bg-blue-50 rounded-lg">
                <h4 className="mb-2">Recommendation:</h4>
                <p className="text-sm">{t.recommendations[severity as keyof typeof t.recommendations]}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-orange-300 bg-orange-50">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <AlertTriangle className="w-5 h-5 text-orange-600 mt-0.5" />
              <div>
                <h4 className="text-orange-800 mb-1">{t.disclaimer}</h4>
                <p className="text-sm text-orange-700">{t.disclaimerText}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl mb-2">{t.title}</h1>
        <p className="text-gray-600">{t.subtitle}</p>
      </div>

      {/* Emergency Warning */}
      <Card className="border-red-300 bg-red-50">
        <CardContent className="p-4">
          <p className="text-red-800 text-sm text-center">{t.emergencyWarning}</p>
        </CardContent>
      </Card>

      {/* Search */}
      <div className="max-w-md">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input
            placeholder={t.searchPlaceholder}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* Category Filter */}
      <div className="flex flex-wrap gap-2">
        <Button
          variant={selectedCategory === null ? "default" : "outline"}
          onClick={() => setSelectedCategory(null)}
        >
          All Categories
        </Button>
        {Object.entries(t.categories).map(([key, label]) => {
          const Icon = categoryIcons[key as keyof typeof categoryIcons];
          return (
            <Button
              key={key}
              variant={selectedCategory === key ? "default" : "outline"}
              onClick={() => setSelectedCategory(key)}
              className="flex items-center space-x-2"
            >
              <Icon className="w-4 h-4" />
              <span>{label}</span>
            </Button>
          );
        })}
      </div>

      {/* Symptoms Selection */}
      <Card>
        <CardHeader>
          <CardTitle>{t.selectSymptoms}</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredSymptoms.map((symptom) => (
              <div
                key={symptom.name}
                className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer"
                onClick={() => handleSymptomToggle(symptom.name)}
              >
                <Checkbox
                  checked={selectedSymptoms.includes(symptom.name)}
                  onChange={() => handleSymptomToggle(symptom.name)}
                />
                <div className="flex-1">
                  <p className="text-sm">{symptom.name}</p>
                  <Badge 
                    size="sm" 
                    className={severityColors[symptom.severity as keyof typeof severityColors]}
                  >
                    {t.severity[symptom.severity as keyof typeof t.severity]}
                  </Badge>
                </div>
              </div>
            ))}
          </div>

          {filteredSymptoms.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              No symptoms found. Try adjusting your search or category filter.
            </div>
          )}
        </CardContent>
      </Card>

      {/* Selected Symptoms Summary */}
      {selectedSymptoms.length > 0 && (
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Selected symptoms ({selectedSymptoms.length}):</p>
                <div className="flex flex-wrap gap-2 mt-2">
                  {selectedSymptoms.map(symptom => (
                    <Badge key={symptom} variant="secondary">{symptom}</Badge>
                  ))}
                </div>
              </div>
              <Button onClick={analyzeSymptoms}>
                {t.checkSymptoms}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Disclaimer */}
      <Card className="bg-gray-50">
        <CardContent className="p-4">
          <div className="flex items-start space-x-3">
            <AlertTriangle className="w-5 h-5 text-gray-600 mt-0.5" />
            <div>
              <h4 className="text-gray-800 mb-1">{t.disclaimer}</h4>
              <p className="text-sm text-gray-600">{t.disclaimerText}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}